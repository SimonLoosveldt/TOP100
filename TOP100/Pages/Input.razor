@page "/input/{param}"
@using FrontendLogic
@using Services
@using ViewModels
@using System.Threading
@inject NavigationManager NavigationManager
@inject IAccountService accountService
@inject UpdateService updateService

<div class="sidebar">
    <SideNav />
</div>

<div class="main">
    <div class="middleContent">

        <div class="top_middleContent">
            <h2>@pageTitle</h2>
        </div>

        <div class="content_middleContent">

            @for (int index = UpperLimit; index >= LowerLimit; index--)
            {
                var currentListEntry = userListEntries.Single(x => x.Points == index);
                <div class="inputCard" id="input_@index">
                    <div class="rankingNumber">
                        <h3>@index</h3>
                    </div>

                    <div class="albumCover">
                        <span>
                            <img src="img/music_black_48dp.png" alt="album icoon">
                        </span>
                    </div>
                    <div class="inputFields">

                        <span id="input_artist"><input type="text" placeholder="ARTIST" @bind="@currentListEntry.Artist"></span>


                        <span id="input_title"><input type="text" placeholder="TITLE" @bind="@currentListEntry.Title"></span>

                    </div>
                </div>
            }

            <input type="button" @bind="save_button" @onclick="UpdateDatabase" />

        </div>
    </div>
</div>


@code {
    public static InputHandler inputHandler { get; set; } = new InputHandler();

    public string pageTitle { get; set; } = "TOP100";

    [Parameter]
    public string Param { get; set; }

    public int UpperLimit { get; set; }
    public int LowerLimit { get; set; }

    public string save_button { get; set; } = "SAVE";

    public static List<ListEntryViewModel> userListEntries { get; set; }


    protected override void OnInitialized()
    {
        if (accountService.loggedInUser == null) HandleNotLoggedIn();

        string[] partsArray = Param.Split('_');

        UpperLimit = Int32.Parse(partsArray[0]);
        LowerLimit = Int32.Parse(partsArray[1]);

        userListEntries = inputHandler.GetPreviousData(accountService.loggedInUser, UpperLimit, LowerLimit);

        Thread syncThread = new Thread(SyncToDatabase);
        syncThread.Start();

    }

    private void UpdateDatabase()
    {
        save_button = "PRESSED";
        inputHandler.UpdateDatabase(accountService.loggedInUser, userListEntries);

    }

    public void HandleNotLoggedIn()
    {
        NavigationManager.NavigateTo("/login", true);
    }

    static void SyncToDatabase(Object obj)
    {
        var autoEvent = new AutoResetEvent(false);
        var updateService = new UpdateService(inputHandler, userListEntries);

        Console.WriteLine($"{DateTime.Now.ToString("HH:mm:ss.fff")} --> Creating timer...");
        var stateTimer = new Timer(updateService.Update, autoEvent, 30000, 60000);

    }

}
