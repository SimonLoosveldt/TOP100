@page "/input/{param}"
@using TopHundred.Controllers.Services
@using TopHundred.Controllers
@using TopHundred.Models.ViewModels
@using System.Threading
@inject NavigationManager NavigationManager
@inject IUserService UserService

<div class="sidebar">
    <SideNav />
</div>

<div class="main">
    <div class="middleContent">

        <div class="top_middleContent">
            <h2>@PageTitle</h2>
        </div>

        <div class="content_middleContent">

            @for (int index = UpperLimit; index >= LowerLimit; index--)
            {
                var currentListEntry = userListEntries.Single(x => x.Points == index);
                <div class="inputCard" id="input_@index">
                    <div class="rankingNumber">
                        <h3>@index</h3>
                    </div>

                    <div class="albumCover">
                        <span>
                            <img src="img/music_black_48dp.png" alt="album icoon">
                        </span>
                    </div>
                    <div class="inputFields">

                        <span id="input_artist"><input type="text" placeholder="ARTIST" @bind="@currentListEntry.Artist"></span>


                        <span id="input_title"><input type="text" placeholder="TITLE" @bind="@currentListEntry.Title"></span>

                    </div>
                </div>
            }

            <input type="button" @bind="SaveButtonLabel" @onclick="UpdateDatabase" />

        </div>
    </div>
</div>


@code {
    private static InputController inputController;

    private readonly string loginPath = "/login";

    [Parameter]
    public string Param { get; set; }

    public string PageTitle { get; set; } = "TOP100";
    public int UpperLimit { get; set; }
    public int LowerLimit { get; set; }
    public string SaveButtonLabel { get; set; } = "SAVE";

    public static List<ListEntryViewModel> userListEntries { get; set; }

    protected override void OnInitialized()
    {
        if (!UserService.IsLoggedIn())
        {
            HandleNotLoggedIn();
        }

        inputController = new InputController();

        var boundaries = Param.Split('_');

        UpperLimit = int.Parse(boundaries[0]);
        LowerLimit = int.Parse(boundaries[1]);

        userListEntries = inputController.GetPreviousData(UserService.GetCurrentUser(), UpperLimit, LowerLimit);

        Thread syncThread = new Thread(SyncToDatabase);
        syncThread.Start();
    }

    private void UpdateDatabase()
    {
        SaveButtonLabel = "PRESSED";
        inputController.UpdateDatabase(UserService.GetCurrentUser(), userListEntries);
    }

    public void HandleNotLoggedIn()
    {
        NavigationManager.NavigateTo(loginPath, true);
    }

    static void SyncToDatabase(Object obj)
    {
        var autoEvent = new AutoResetEvent(false);
        //var updateService = new UpdateService(inputHandler, userListEntries);

        Console.WriteLine($"{DateTime.Now.ToString("HH:mm:ss.fff")} --> Creating timer...");
        //var stateTimer = new Timer(updateService.Update, autoEvent, 30000, 60000);
    }
}
